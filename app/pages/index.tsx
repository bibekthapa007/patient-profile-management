import {
  Box,
  Button,
  Flex,
  Grid,
  Heading,
  Img,
  SimpleGrid,
  Text,
} from "@chakra-ui/react";
import { useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";

import { Category } from "types/category";
import { useAppDispatch, useAppSelector } from "store/hook";
import { fetchMorePosts, initfetchPosts } from "features/post/PostSlice";
import PostCard from "components/PostCard";
import Slider from "components/Slider";
import { NextArrow, PrevArrow } from "components/SliderArrow";
import DashboardLayout from "components/DashboardLayout";
import { selectTranslations, setLang } from "features/i18n/i18nSlice";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import ProtectedRoute from "components/ProtectedRoute";

export default function Home() {
  let dispatch = useAppDispatch();
  let router = useRouter();
  const { user } = useAppSelector((state) => state.auth);

  console.log(user, "User From the home page");

  const { categories, categoriesLoading } = useAppSelector(
    (state) => state.category
  );

  const { page, nomore, posts, postsLoading, postsError } = useAppSelector(
    (state) => state.post
  );

  let settings = {
    slidesToShow: 1,
    slidesToScroll: 1,
    dots: true,
    infinite: true,
    prevArrow: <PrevArrow />,
    nextArrow: <NextArrow />,
  };

  useEffect(() => {
    dispatch(initfetchPosts({ page: 1 }));
  }, [dispatch]);

  const loadMore = (e: React.MouseEvent<HTMLElement>) => {
    e.preventDefault();
    dispatch(fetchMorePosts({ page }));
  };

  return (
    <ProtectedRoute>
      <DashboardLayout>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Box mx={"auto"} maxW={"6xl"} pb={14}>
          {/* <OldTop  categories={categories} settings={settings} /> */}
          {/* <NewTop categories={categories} /> */}

          <Heading size="md" my="6">
            Top News of the day
          </Heading>
          {!posts && postsLoading && <Box>Loading Posts...</Box>}
          <SimpleGrid columns={[1, 2, 2, 3, 3]} spacing={5} my={2}>
            {posts &&
              posts.map((post) => {
                return <PostCard key={post._id} post={post} />;
              })}
          </SimpleGrid>

          <Text colorScheme={"red"}>{postsError && postsError}</Text>

          <Flex justifyContent={"center"}>
            {!nomore && (
              <Button colorScheme="green" onClick={loadMore}>
                {postsLoading ? "Loading" : "Load More"}
              </Button>
            )}
          </Flex>
        </Box>
      </DashboardLayout>
    </ProtectedRoute>
  );
}
